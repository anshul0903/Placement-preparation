#include <iostream>
#include <queue>
using namespace std;

struct node
{
    int data;
    struct node *left;
    struct node *right;
};

struct node *tree=NULL;

void insert(int n)
{
    struct node *new_node= new node();
    struct node *nodeptr,*parentptr;
    new_node->data=n;
    new_node->left=NULL;
    new_node->right=NULL;
    if(tree==NULL)
    {
    tree=new_node;
    tree->left=NULL;
    tree->right=NULL;
    }
    else
    {
        parentptr=NULL;
        nodeptr=tree;
        while(nodeptr!=NULL)
        {
            parentptr=nodeptr;
            if(n<nodeptr->data)
            nodeptr=nodeptr->left;
            else
            nodeptr=nodeptr->right;
        }
        if(n<parentptr->data)
        parentptr->left=new_node;
        else
        parentptr->right=new_node;
    }
}

void preorderDFS(struct node *tree)
{
    if(tree!=NULL)
    {
    cout<<tree->data<<" ";
    preorderDFS(tree->left);
    preorderDFS(tree->right);
    }
}

void inorder(struct node *tree)
{
    if(tree!=NULL)
    {
    inorder(tree->left);
    cout<<tree->data<<" ";
    inorder(tree->right);
    }
}

void postorder(struct node *tree)
{
    if(tree!=NULL)
    {
    postorder(tree->left);
    postorder(tree->right);
    cout<<tree->data<<" ";
    }
}
void levelorderBFS()
{
    struct node *ptr;
    queue <struct node *> q;
    q.push(tree);
    while(!q.empty())
    {
        ptr=q.front();
        cout<<ptr->data<<" ";
        q.pop();
        if(ptr->left!=NULL)
        q.push(ptr->left);
        if(ptr->right!=NULL)
        q.push(ptr->right);
    }
}

bool search(struct node *tree,int s)
{
    if(tree==NULL)
    return false;
    else if(tree->data==s)
    return true;
    else
    {
    if(s<tree->data)
    search(tree->left,s);
    else
    search(tree->right,s);
    }
}

void mirror(struct node *tree)
{
    if(tree!=NULL)
    {
        mirror(tree->left);
        mirror(tree->right);
        swap(tree->left,tree->right);
    }
}

int height(struct node *tree)
{
    int l,r;
    if(tree==NULL)
    return 0;
    else
    {
        l=height(tree->left);
        r=height(tree->right);
        if(l>r)
        return (l+1);
        else
        return (r+1);
    }
}

int main()
{
    int t,n;
    cin>>t;
    while(t--)
    {
        cin>>n;
        insert(n);
    }
    cout<<"preorder"<<endl;
    preorderDFS(tree);
    cout<<"\ninorder"<<endl;
    inorder(tree);
    cout<<"\npostorder"<<endl;
    postorder(tree);
    cout<<"\nLevelorder"<<endl;
    levelorderBFS();
    int s;
    cin>>s;
    if(search(tree,s))
    cout<<"\nElement is Present";
    else
    cout<<"\nElement isnt Present";
    mirror(tree);
    cout<<"\nLevelorder"<<endl;
    levelorderBFS();
    cout<<"\nHEIGHT = "<<height(tree);
	return 0;
}
