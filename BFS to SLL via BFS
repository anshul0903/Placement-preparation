#include <iostream>
#include <queue>
using namespace std;

typedef struct node
{
    int data;
    struct node *next;
}node;
node *start=NULL;

typedef struct tree
{
    int data;
    struct tree *left;
    struct tree *right;
}tree;
tree *head=NULL;

void create(int n)
{
    tree *ptr,*parentptr;
    tree *new_node=new tree();
    new_node->data=n;
    new_node->left=NULL;
    new_node->right=NULL;
    if(head==NULL)
        head=new_node;
    else
    {
        ptr=head;
        while(ptr!=NULL)
        {
            parentptr=ptr;
            if(n<=ptr->data)
            ptr=ptr->left;
            else
            ptr=ptr->right;
        }
        if(n<=parentptr->data)
        parentptr->left=new_node;
        else
        parentptr->right=new_node;
    }
}

node *newnode(int d)
{
    node *new_node= new node();
    new_node->data=d;
    new_node->next=NULL;
    return new_node;
}

            
void createLL()
{
    node *PREV=NULL;
    node *cur,*pptr;
    tree *ptr;
    queue<tree *> q;
    q.push(head);
    while(!q.empty())
    {
        ptr=q.front();
        q.pop();
        cur=newnode(ptr->data);
        if(start==NULL)
        {
            start=cur;
        }
        else
        {
            pptr=start;
            while(pptr->next!=NULL)
            pptr=pptr->next;
            pptr->next=cur;
        }
        if(ptr->left)
        q.push(ptr->left);
        if(ptr->right)
        q.push(ptr->right);
    }
}
    
void display()
{
    while(start!=NULL)
    {
        cout<<start->data<<"->";
        start=start->next;
    }
}
    
    


int main()
{
    int t,n;
    cin>>t;
    while(t--)
    {
        cin>>n;
        create(n);
    }
    createLL();
    display();
	return 0;
}
